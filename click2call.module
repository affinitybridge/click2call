<?php

//-------------------------------------------------------
// CORE HOOKS
//-------------------------------------------------------

/**
 * Implements hook_form_FORM_ID_alter().
 */
function click2call_form_click2call_call_form_alter(&$form, &$form_state, $form_id) {
  // Add form build_id
  if (isset($form['#attached']['js'])) {
    foreach ($form['#attached']['js'] as $delta => $js_array) {
      if (isset($js_array['type']) && 'setting' == $js_array['type']) {
        if (isset($js_array['data']['click2call'])) {
          $form['#attached']['js'][$delta]['data']['click2call']['formBuildId'] = $form['#build_id'];
          return;
        }
      }
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function click2call_menu() {
  $items['admin/settings/click2call'] = array(
    'title' => 'Click2Call',
    'description' => 'Click2Call settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('click2call_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/click2call.admin.inc',
  );

  $items['click2call/call/%'] = array(
    'title' => 'Call',
    'description' => '',
    'page callback' => 'click2call_call',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'delivery callback' => 'drupal_json_output',
    'file' => 'includes/click2call.callbacks.inc',
  );

  $items['click2call/status/%'] = array(
    'title' => 'Get Call Status',
    'description' => '',
    'page callback' => 'click2call_status',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'delivery callback' => 'drupal_json_output',
    'file' => 'includes/click2call.callbacks.inc',
  );

  $items['click2call/hangup/%'] = array(
    'title' => 'Hangup',
    'description' => '',
    'page callback' => 'click2call_hangup',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'delivery callback' => 'drupal_json_output',
    'file' => 'includes/click2call.callbacks.inc',
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function click2call_theme($existing, $type, $theme, $path) {
  return array(
    'click2call_phone_numbers' => array(
      'variables' => array('field_name' => NULL, 'delta' => 0, 'content_type' => ''),
      // TODO: Include file property and move function out into .theme.inc
      'file' => '/includes/click2call.theme.inc',
    ),
  );
}

//-------------------------------------------------------
// CONTRIB HOOKS
//-------------------------------------------------------

/**
 * Implements hook_voipscript_get_script_names().
 */
function click2call_voipscript_get_script_names() {
  $script_names = array(
    'click2call_2way_engagement_script',
    'click2call_2way_engagement_sms_script',
    'click2call_sms_script',
  );
  return $script_names;
}

/**
 * Implements hook_voipscript_load_script().
 */
function click2call_voipscript_load_script($script_name, $params = NULL) {
  $script = NULL;
  switch ($script_name) {

    case 'click2call_2way_engagement_script':
      $script = new VoipScript('click2call_2way_engagement_script');
      $script->addSay($params['text_1']);
      $script->addBeep();
      $script->addSay(t("Connecting you now."));
      $script->addDial($params['number_2'], 30, false, 3600, '+1' . $params['number_1']);
      break;

    case 'click2call_2way_engagement_sms_script':
      $script = new VoipScript('click2call_2way_engagement_sms_script', $params);
      $script->addSay($params['text_1']);
      $script->addBeep();
      $script->addSay(t("Connecting you now."));
      $script->addDial($params['number_2'], 30, false, 3600, '+1' . $params['number_1']);
      // TODO: Add Caller ID
      // TODO: Need to limit length of text to 160, or less if Twilio is using test account
//      $script->addSendText(substr(strip_tags($params['text_2']), 0));
      break;

    case 'click2call_sms_script':
      $script = new VoipScript('click2call_sms_script');
      // TODO: Add Caller ID
      // $script->addSendText(substr(strip_tags($params['text_1']), 0), $params['number_1']);
      // function addSendText($text, $to='', $network='SMS', $caller_id=''){
      break;

    default:
      break;
  }
  return $script;
}

//-------------------------------------------------------
// THEME FUNCTION - REFACTOR AND MOVE
//-------------------------------------------------------

function click2call_get_form_build_info($c2c_form_build_id) {
  $result = db_query(
    'SELECT * FROM {cache_form} cf WHERE cf.cid = :cid',
    array(':cid' => 'form_state_' . $c2c_form_build_id)
  );
  if ($result) {
    while ($record = $result->fetchAssoc()) {
      if (isset($record['data'])) {
        if ($form_array = unserialize($record['data'])) {
          return $form_array['build_info'];
        }
      }
    }
  }
}

function click2call_call_form($form, &$form_state, $module, $delta, $params) {
  $form_state['cache'] = TRUE;

  $c2c_key = $module . '-' . $delta;
  $click2call_settings = array(
    'module' => $module,
    'delta' => $delta,
    'c2cKey' => $c2c_key,
  );
  $form['#attached']['js'] = array(
    array(
      'data' => array(
        'click2call' => $click2call_settings,
      ),
      'type' => 'setting',
    ),
    drupal_get_path('module', 'click2call') . '/js/click2call.js',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'click2call') . '/css/click2call.css',
  );

  // Add vars so they are easy to get later from AJAX calls
  $form_state['build_info']['args']['module'] = $module;
  $form_state['build_info']['args']['delta'] = $delta;
  $form_state['build_info']['args']['c2c_key'] = $c2c_key;
  $form_state['build_info']['args']['params'] = $params;
  // TODO: Get rid of these last 2, shouldn't need them
  $form_state['build_info']['args']['call_label '] = 'click2call_webform_link';
//  $form_state['build_info']['args']['to_number'] = 'click2call_phoneto';

  $call_label = 'click2call_webform_link';
  $form['c2c_header'] = array(
    '#type' => 'markup',
    '#markup' => $call_label,
  );

  // Hidden div to store the phone list
  $form['c2c_hidden'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="click2call-' . $c2c_key . '-hidden" class="click2call-hidden"></div>',
    '#prefix' => '<div id="click2call-group-' . $c2c_key . '" class="click2call-hidden">',
  );

  // Hidden div to store the call status in case of error
  $form['c2c_status'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="click2call-' . $c2c_key . '-status"></div>',
  );

  // Hidden input to store the call cid.
  $form['c2c_callcid'] = array(
    '#type' => 'markup',
    '#markup' => '<input type="hidden" value="" id="click2call-' . $c2c_key . '-callcid"/>',
  );

  // Theme function for phone number entry
  $form['c2c_phone_numbers'] = array(
    '#type' => 'markup',
    '#markup' => theme('click2call_phone_numbers', array('field_name' => $module, 'delta' => $delta)),
  );

  //Call/Remove button
  $form['c2c_call_button'] = array(
    '#type' => 'markup',
    '#markup' => '<input class="click2call-button" id="click2call-button-' . $c2c_key . '" type="button" value="Call Me" />',
  );

  //Hangup button
  $form['c2c_hangup_button'] = array(
    '#type' => 'markup',
    '#markup' => '<input class="click2call-hangup-button" id="click2call-hangup-button-' . $c2c_key . '" type="button" value="' . t('Hangup') . '" />',
    '#suffix' => '</div>',
  );

  return $form;
}

/*
 *
 */
function click2call_get_voipcall_log($call_cid) {
  // TODO: Use drupal static to save this, add a reset param
  return db_select('voipcall', 'vc')
    ->fields('vc')
    ->condition('cid' , $call_cid)
    ->execute()
    ->fetchAssoc();
}

/*
 * Implements hook_click2call_hangup().
 */
function click2call_click2call_hangup($call) {
  if ($script = $call->getScript()) {
    if ($script_name = $script->getName()) {
      switch ($script_name) {
        case 'click2call_2way_engagement_sms_script':
          if ($text_2 = $script->getVar('text_2')) {
            $sms_call = new VoipCall(array());
            $sms_call->setDestNumber($call->getDestNumber());
            $sms_call->setDestName($call->getDestName());
            // TODO: Need to limit length of text to 160, or less if Twilio is using test account
            voip_text($text_2, $sms_call);
          }
          break;
      }
    }
  }
}

/*
 * Implements hook_click2call_completed().
 */
function click2call_click2call_completed($call) {
  if ($script = $call->getScript()) {
    if ($script_name = $script->getName()) {
      switch ($script_name) {
        case 'click2call_2way_engagement_sms_script':
          if ($text_2 = $script->getVar('text_2')) {
            $sms_call = new VoipCall(array());
            $sms_call->setDestNumber($call->getDestNumber());
            $sms_call->setDestName($call->getDestName());
            // TODO: Need to limit length of text to 160, or less if Twilio is using test account
            voip_text($text_2, $sms_call);
          }
          break;
      }
    }
  }
}
