<?php

//-------------------------------------------------------
// CORE HOOKS
//-------------------------------------------------------

/**
 * Implements hook_form_FORM_ID_alter().
 */
function click2call_webform_form_click2call_call_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['build_info']['args']['module'])) {
    switch ($form_state['build_info']['args']['module']) {
      case 'click2call_webform':
        // TODO: Add Phone number and maybe text
        $args = $form_state['build_info']['args'];
        list($nid, $webform_cid) = explode('-', $args['delta']);

        if (isset($args['params']['script_method'])) {
          switch ($args['params']['script_method']) {
            case 'post_submit':
              return;
              continue;
              break;
          }
        }

        if ($extra = $args['params']['extra']) {
          if ($submission_data = $args['params']['submission']->data) {

            // Set Phone Component 1
            if ($extra['phone_1_component']) {
              if ($submission_data[$extra['phone_1_component']]) {
                $number = array_shift($submission_data[$extra['phone_1_component']]);
                array_unshift($submission_data[$extra['phone_1_component']], $number);
                $form['c2c_call_button']['#markup'] = str_replace(
                  'Call Me',
                  t('Call Me at !number', array('!number' => $number)),
                  $form['c2c_call_button']['#markup']
                );
                $form['c2c_number'] = array(
                  '#type' => 'value',
                  '#value' => $number,
                );
              }
            }

            // Set Phone Component 2
            // TODO: This should handle a case where phone is coming from representatives,
            //       OR it should handle a case where phone is coming from phone
            // TODO: Leave phone component handling if possible
            if ($extra['phone_2_component']) {
              $phone_2_component_cid = $extra['phone_2_component'];
              if ($submission_data[$extra['phone_2_component']]) {
                if ($node = node_load($nid)) {
                  $phone_2_component = $node->webform['components'][$extra['phone_2_component']];
                  switch ($phone_2_component['type']) {
                    case 'phone':
                      // TODO: Get label from phone component type
                      // TODO: This should actually be pretty easy, just returning the value
                      break;
                    case 'represent':
                      if (isset($phone_2_component['extra']['options_source'])) {
                        $representative = webform_represent_get_representatives(
                          $phone_2_component['extra']['options_source'],
                          $submission_data[$extra['phone_2_component']]
                        );
                        if ($representative) {
                          $form['c2c_header']['#markup'] = str_replace(
                            'click2call_webform_link',
                            t(
                              'Contact !contact_label',
                              array('!contact_label' => webform_represent_format_resource($representative))
                            ),
                            $form['c2c_header']['#markup']
                          );
                        }
                        else {
                          $form['c2c_header']['#markup'] = str_replace(
                            'click2call_webform_link',
                            t('Your Representative could not be found.  Something has gone wrong.'),
                            $form['c2c_header']['#markup']
                          );
                          // TODO: Set watchdog on this error case
                        }
                      }
                      break;
                    default:
                      $form['c2c_header']['#markup'] = str_replace(
                        'click2call_webform_link',
                        '',
                        $form['c2c_header']['#markup']
                      );
                      break;
                  }
                }
              }
            }
          }
        }
        break;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function click2call_webform_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['webform'])) {
    $page_num = $form_state['webform']['page_num'];
    foreach ($form_state['webform']['component_tree']['children'] as $key => $component) {
      if ('click2call' == $component['type'] && $page_num == $component['page_num']) {
        switch ($component['extra']['script_method']) {
          case 'automatic':
            $form['#attached']['js'][] = drupal_get_path('module', 'click2call_webform') . '/js/click2call_webform.js';
            break;
        }
      }
    }
  }
}

/*
 *
 */
function click2call_tokens_alter(array &$replacements, array $context) {
  switch ($context['type']) {
    case 'submission':
      foreach ($context['tokens'] as $name => $original) {
        // Skip this token if it's already set
        if (isset($replacements[$original])) {
          continue;
        }
        $token_chunks = explode(':', $name);
        if ('values' == $token_chunks[0] && 'call_log' == $token_chunks[2]) {
          // Get component from webform by form_key
          $click2call_cid = 0;
          $callcid = 0;
          if (isset($context['data']['node']->webform['components'])) {
            foreach ($context['data']['node']->webform['components'] as $cid => $component) {
              if ('click2call' == $component['type']) {
                if (!strcmp($component['form_key'], $token_chunks[1])) {
                  $click2call_cid = $cid;
                }
              }
            }
          }
          if ($click2call_cid) {
            if (isset($context['data']['webform-submission']->data[$click2call_cid])) {
              $callcid = current($context['data']['webform-submission']->data[$click2call_cid]);
            }
          }
          if ($callcid && isset($token_chunks[3])) {
            $call_data = voipcall_get_log_by_cid($callcid);
            if (isset($call_data) && isset($call_data[$token_chunks[3]])) {
              if (isset($token_chunks[4])) {
                switch ($token_chunks[4]) {
                  case 'nolabel':
                    $replacements[$original] = $call_data[$token_chunks[3]];
                    break;
                }
              }
              else {
                $replacements[$original] = $token_chunks[3] . ': ' . $call_data[$token_chunks[3]];
              }
            }
          }
        }
      }
      break;
  }
}

/*
 *
 */
function click2call_webform_webform_submission_presave($node, &$submission) {
  // TODO: This is where we fire stuff on submit.
  if (!$submission->is_draft && isset($submission->original)) {
    if ($submission->original->is_draft) {
      foreach ($node->webform['components'] as $component) {
        switch ($component['type']) {
          case 'click2call':
            switch ($component['extra']['script_method']) {
              case 'post_submit':
                // TODO: Check params are set, or just run?
                // TODO: Get components and send message
                $module = 'click2call_webform';
                $delta = $component['nid'] . '-' . $component['cid'];
                $c2c_key = $module . '-' . $delta;

    //            $name = variable_get('click2call_block_script_desc_' . $delta, t('Click here to call'));
                $caller_name = t('Click2Call Block ' . $delta);
                $caller_uid = 1;
                global $user;
                $params = /*$component['extra'] +*/ array(
                  'module' => $module,
                  'delta' => $delta,
                  'uid' => $user->uid,
    //              'name' => $name,
            //      'number' => $number,
                  'dest_name' => $user->name,
                  'caller_uid' => $caller_uid,
            //      'script_name' => $script_name,
                  'click2call_key' => $c2c_key,
              //    'click2call_phoneto' => $phone_to,
                  'caller_name' => $caller_name,
            //      'click2call_call_form_params' => $form_build_info['args']['params'],
                  'script_name' => $component['extra']['script_name'],
                  'script_method' => $component['extra']['script_method'],
                );

                // TODO: Set params

                // Set From number
                if (isset($component['extra']['phone_1_component']) && isset($component['extra']['phone_1_component'])) {
                  $params['number_1'] = $submission->data[$component['extra']['phone_1_component']][0];
                  $params['number'] = $params['number_1'];
                }

                // Set text 1
                if (isset($component['extra']['text_1_component']) && isset($component['extra']['text_1_component'])) {
                  $params['text_1'] = $node->webform['components'][$component['extra']['text_1_component']]['value'];
                }

                // Allow any modules to alter the params passed in, even script name
                // TODO: Click2Call Webform will alter these params to put first name in
                drupal_alter('click2call_params', $params);

                $script = VoipScript::loadScript($params['script_name'], $params);
                $call = new VoipCall(array());
                $call->setDestNumber($params['number']);
                $call->setDestName('Dave');
    //            $call->setCallerName($params['caller_name']);
//                $call->setScript($script);
  //              $call->save();
                // Dial the call.
//                voip_dial($call);
                // TODO: Set this all up, replace tokens and strip tags
                $params['text_1'] = token_replace(
                  $params['text_1'],
                  array(
                    'node' => $node,
                    'submission' => $submission,
                  )
                );
                voip_text($params['text_1'], $call);

                // Log call with watchdog
                $type = 'click2call';
                $message = t(
                  'New Click2Call message recorded by !username to phone !number. See voip call cid !call_cid.',
                  array(
                    '!username' => $user->name,
                    '!number' => $params['number'],
                    '!call_cid' => $call->getCid(),
                  )
                );
                watchdog($type, $message);
                if ($call_cid = $call->getCid()) {
//                  dsm('well yippie key eh, I got a call cid for the post submit thingy! - > '.$call_cid);
                }
                break;
            }
            break;
        }
      }
    }
  }
}

/*
 *
 */
function click2call_webform_token_info_alter(&$data) {
  $click2call_description = '<div>' . t('Click2Call component tokens from call log. Replace the "?" with the "field key", and replace ?? a call log param.') . '</div>' .
    '<ul>' .
    '<li>[submission:values:?:call_log:??]</li>' .
    '<li>[submission:values:?:call_log:dest_number]</li>' .
    '</ul>' .
    '<div>You may append :nolabel to get the value with a label:</div>' .
    '<ul>' .
    '<li>[submission:values:?:call_log:??::nolabel]</li>' .
    '<li>[submission:values:?:call_log:dest_number:nolabel]</li>' .
    '</ul>';

  $data['tokens']['submission']['values']['description'] .= $click2call_description;
}

/*
 * Impolements hook_TYPE_alter().
 */
function click2call_webform_click2call_params_alter(&$params) {
  switch ($params['module']) {
    case 'click2call_webform':
      if (isset($params['script_name'])) {
        switch ($params['script_name']) {
          case 'click2call_2way_engagement_script':
          case 'click2call_2way_engagement_sms_script':
          case 'click2call_sms_script':
            if (isset($params['submission'])) {
              $submission = $params['submission'];
              $node = node_load($submission->nid);
              module_load_include('inc', 'webform', 'includes/webform.submissions');
              $submission_array = webform_submission_render($node, $submission, NULL, 'html');
              $component_info = $node->webform['components'];

              // Set From number
              if (isset($params['extra']['phone_1_component'])) {
                $submitted_component = webform_util_get_submission_by_cid(
                  $node,
                  $params['extra']['phone_1_component'],
                  $submission_array
                );
                if (isset($submitted_component)) {
                  $params['click2call_number'] = click2call_webform_get_number(
                    $submitted_component,
                    $submission->data[$params['extra']['phone_1_component']]
                  );
                  $params['number_1'] = $params['click2call_number'];
                  $params['number'] = $params['click2call_number'];
                }
              }

              // Set To Number
              if (isset($params['extra']['phone_2_component'])) {
                $submitted_component = webform_util_get_submission_by_cid(
                  $node,
                  $params['extra']['phone_2_component'],
                  $submission_array
                );
                if (isset($submitted_component)) {
                  $params['number_2'] = click2call_webform_get_number(
                    $submitted_component,
                    $submission->data[$params['extra']['phone_2_component']]
                  );
                }
              }

              // Set text 1
              if (isset($params['extra']['text_1_component'])) {
                $submitted_component = webform_util_get_submission_by_cid(
                  $node,
                  $params['extra']['text_1_component'],
                  $submission_array
                );
                if (isset($submitted_component)) {
                  $params['text_1'] = $submitted_component['#value'];
                }
              }

              // Set text 2
              if (isset($params['extra']['text_2_component'])) {
                $submitted_component = webform_util_get_submission_by_cid(
                  $node,
                  $params['extra']['text_2_component'],
                  $submission_array
                );
                if (isset($submitted_component)) {
                  $params['text_2'] = $submitted_component['#value'];
                }
              }
            }
            break;
        }
      }
      break;
  }
}

//-------------------------------------------------------
// CONTRIB HOOKS
//-------------------------------------------------------

/**
 * Implements hook_webform_component_info().
 */
function click2call_webform_webform_component_info() {
  $components = array();

  $components['click2call'] = array(
    'label' => t('Click2Call'),
    'description' => t('Add a Click2Call widget to run VOIP scripts from webform.'),
    'features' => array(
      'csv' => FALSE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => TRUE,
      'title_display' => TRUE,
      'title_inline' => TRUE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
    ),
    'file' => 'click2call_webform.component.inc',
  );

  return $components;
}

//-------------------------------------------------------
// HELPER FUNCTIONS
//-------------------------------------------------------

/*
 *
 */
function click2call_webform_get_number($component, $value) {
  switch ($component['#webform_component']['type']) {
    case 'phone':
      return $component['#value'];
      break;
    case 'represent':
      $representative = webform_represent_get_representatives(
        $component['#webform_component']['extra']['options_source'],
        $value
      );
      if (isset($representative)) {
        if (isset($representative->offices[0]->tel)) {
          return $representative->offices[0]->tel;
        }
      }
      break;
  }
}

/*
 *
 */
function webform_represent_get_representatives($represent_sets, $emails, $multiple = FALSE) {
  $representatives = array();
  foreach ($represent_sets as $represent_set) {
    if ($represent_set) {
      foreach ($emails as $email) {
        if ($email) {
          if ($represent_resource = webform_represent_resource_load($represent_set, $email)) {
            if ($multiple) {
              $representatives[] = $represent_resource;
            }
            else {
              return $represent_resource;
            }
          }
        }
      }
    }
  }
  return $representatives;
}

/*
 *
 */
function webform_util_get_submission_by_cid($node, $cid, $submission_array) {
  if (isset($node->webform['components'][$cid])) {
    $component_array = $node->webform['components'][$cid];
    if (isset($submission_array[$component_array['form_key']])) {
      return $submission_array[$component_array['form_key']];
    }
  }
}

/*
 *
 */
function voipcall_get_log_by_cid($call_cid) {
  // TODO: Use drupal static to save this, add a reset param
  return db_select('voipcall', 'vc')
    ->fields('vc')
    ->condition('cid' , $call_cid)
    ->execute()
    ->fetchAssoc();
}
